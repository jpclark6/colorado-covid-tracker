AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  colorado-covid-tracker

  Sample SAM Template for colorado-covid-tracker
Parameters: 
  NotificationEmail:
    Type: String
Globals:
  Function:
    Environment:
      Variables:
        S3_BUCKET: !Ref S3Bucket
        DB_CREDENTIALS: '{{resolve:ssm:/colorado-covid/database:1}}'
        INVALIDATE_CACHE_KEY: '{{resolve:ssm:/colorado-covid/invalidate_cache_key:1}}'
        API_URL: '{{resolve:ssm:/colorado-covid/api_url:1}}'
        EMAIL_TOPIC: !Ref EmailTopic

Resources:
  CoCovidFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/api/
      Handler: app.app
      Runtime: python3.8
      Timeout: 15
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !Ref EmailTopic
      Events:
        AllData:
          Type: Api
          Properties:
            Path: /data/
            Method: get
          Auth:
            UsagePlan:
              CreateUsagePlan: PER_API
              Description: Usage plan for this API
              Throttle:
                BurstLimit: 100
                RateLimit: 100
        InvalidateCache:
          Type: Api
          Properties:
            Path: /invalidate_cache/
            Method: post
          Auth:
            UsagePlan:
              CreateUsagePlan: PER_API
              Description: Usage plan for this API
              Throttle:
                BurstLimit: 1
                RateLimit: 1
  
  CasesDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/data/
      Handler: cases.handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 150
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !Ref EmailTopic
      Events:
        CaseEvent:
          Type: Schedule
          Properties:
            Schedule: cron(*/10 0,1,2,3,23 * * ? *) # Every 10 min from 4PM to 9PM

  VaccineDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/data/
      Handler: vaccines.handler
      Runtime: python3.8
      Timeout: 60
      MemorySize: 350
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !Ref EmailTopic
      Events:
        VacEvent:
          Type: Schedule
          Properties:
            Schedule: cron(*/10 0,1,2,3,23 * * ? *) # Every 10 min from 4PM to 9PM

  DailyDataCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/data/
      Handler: check.handler
      Runtime: python3.8
      Timeout: 60
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref EmailTopic
      Events:
        DataCheckEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 4 * * ? *) # daily at 9PM MST

  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/
      Handler: health_check.handler
      Runtime: python3.8
      Timeout: 60
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref EmailTopic
      Events:
        HealthEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *) # once an hour

  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: !Ref NotificationEmail

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    

Outputs:
  CoCovidApiData:
    Description: "API Gateway endpoint URL for Prod stage for Colorado Covid function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/data/"
  CoCovidBucket:
    Description: "Bucket used to store stack"
    Value: !Ref S3Bucket
